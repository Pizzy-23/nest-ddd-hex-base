import { DataSource, Repository } from 'typeorm';
import { InjectDataSource } from '@nestjs/typeorm';
import { Injectable } from '@nestjs/common';
import { __Name__Entity } from '../../../domain/entities/__name__.entity';
import { __Name__Schema } from '../entities/__name__.schema';
import { __Name__Repository } from '../../../domain/repositories/__name__.repository';
import { BaseTypeormRepository } from '../../../../libs/ddd/infrastructure/database/base-classes/base-typeorm.repository';
import { Uuid } from '../../../../libs/ddd/domain/value-objects/uuid.value-object';
import { Mapper } from '../../../../libs/ddd/domain/mapper';

@Injectable()
export class __Name__TypeormRepository
  extends BaseTypeormRepository<__Name__Entity, __Name__Schema>
  implements __Name__Repository
{
  constructor(
    @InjectDataSource()
    private readonly dataSource: DataSource,
  ) {
    super(dataSource.getRepository(__Name__Schema), new __Name__Mapper());
  }
}

class __Name__Mapper implements Mapper<__Name__Entity, __Name__Schema> {
  toDomain(schema: __Name__Schema): __Name__Entity {
    return new __Name__Entity(
      {
        name: schema.name,
        description: schema.description,
      },
      new Uuid(schema.id),
    );
  }

  toPersistence(entity: __Name__Entity): __Name__Schema {
    const schema = new __Name__Schema();
    schema.id = entity.id.value;
    schema.name = entity.name;
    schema.description = entity.description;
    schema.createdAt = entity.createdAt;
    schema.updatedAt = entity.updatedAt;
    return schema;
  }
}
