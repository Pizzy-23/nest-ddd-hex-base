import { AggregateRoot } from '../../../../../../libs/ddd/domain/base-classes/aggregate-root.base'; // Corrigido path
import { Uuid } from '../../../../../../libs/ddd/domain/value-objects/uuid.value-object'; // Corrigido path
import { DomainEvent } from '../../../../../../libs/ddd/domain/domain-events/domain-event'; // Corrigido path

export class __Name__CreatedDomainEvent extends DomainEvent {
  constructor(props: Omit<__Name__CreatedDomainEvent, 'correlationId' | 'id' | 'createdAt' | 'entityId'>) {
    super(props);
  }
}

export interface Create__Name__Props {
  name: string;
  description?: string;
}

export class __Name__Entity extends AggregateRoot<Create__Name__Props> {
  name: string;
  description?: string;

  constructor(props: Create__Name__Props, id?: Uuid) {
    super(props, id);
    this.name = props.name;
    this.description = props.description;
  }

  static create(props: Create__Name__Props): __Name__Entity {
    const __name__ = new __Name__Entity(props);
    __name__.addEvent(
      new __Name__CreatedDomainEvent({
        aggregateId: __name__.id.value,
        name: __name__.name,
      }),
    );
    return __name__;
  }
}
