import { Injectable } from '@nestjs/common';
import { __Name__Entity } from '@domain/entities/__name__.entity';
import { __Name__Repository } from '@domain/repositories/__name__.repository';

// Use um Query DTO se precisar de filtros ou paginadores mais robustos.
// O seu exemplo FindAllUsersUseCase usa 'options' no execute. Vamos manter flexível.
// export class FindAll__Names__Query {
//   filter?: any;
//   relations?: string[];
//   orderBy?: { [key: string]: 'ASC' | 'DESC' };
//   skip?: number;
//   take?: number;
// }

@Injectable()
export class FindAll__Names__UseCase {
  constructor(
    private readonly __name__Repository: __Name__Repository,
  ) {}

  async execute(options?: {
    filter?: any;
    relations?: string[];
    orderBy?: { [key: string]: 'ASC' | 'DESC' };
    skip?: number;
    take?: number;
    // TODO: Adicione mais opções de query aqui.
  }): Promise<__Name__Entity[]> {
    // Seu UserRepository usa `findAllWithRoles()`. O seu gerador pode decidir se chama
    // `findAll()` ou `findAllWithRelations()` ou outro método específico do repositório.
    return await this.__name__Repository.findAll(options); // Assumindo que findAll agora aceita opções.
  }
}