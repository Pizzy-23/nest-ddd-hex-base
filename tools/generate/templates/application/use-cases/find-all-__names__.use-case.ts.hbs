import { IQueryHandler, QueryHandler } from '@nestjs/cqrs';
import { ApiPropertyOptional } from '@nestjs/swagger';
import { IsNumber, IsOptional, Min } from 'class-validator';
import { Type } from 'class-transformer';
import { Inject } from '@nestjs/common';
import { __Name__Repository } from '../../domain/repositories/__name__.repository';
import { __Name__Dto } from '../dtos/__name__.dto';

export class FindAll__Names__Query {
  @ApiPropertyOptional({ description: 'Number of items to skip for pagination' })
  @IsOptional()
  @IsNumber()
  @Min(0)
  @Type(() => Number)
  readonly skip?: number;

  @ApiPropertyOptional({ description: 'Number of items to take for pagination' })
  @IsOptional()
  @IsNumber()
  @Min(1)
  @Type(() => Number)
  readonly take?: number;

  constructor(props: Partial<FindAll__Names__Query>) {
    Object.assign(this, props);
  }
}

@QueryHandler(FindAll__Names__Query)
export class FindAll__Names__UseCase implements IQueryHandler<FindAll__Names__Query, __Name__Dto[]> {
  constructor(
    @Inject(__Name__Repository)
    private readonly __name__Repository: __Name__Repository,
  ) {}

  async execute(query: FindAll__Names__Query): Promise<__Name__Dto[]> {
    const { skip, take } = query;
    const __names__ = await this.__name__Repository.findAll(skip, take);

    return __names__.map((__name__) => new __Name__Dto({
      id: __name__.id.value,
      name: __name__.name,
      description: __name__.description,
      createdAt: __name__.createdAt,
      updatedAt: __name__.updatedAt,
    }));
  }
}
