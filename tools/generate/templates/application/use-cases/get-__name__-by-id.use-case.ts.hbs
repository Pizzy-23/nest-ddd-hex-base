import { IQueryHandler, QueryHandler } from '@nestjs/cqrs';
import { Inject, NotFoundException } from '@nestjs/common';
import { IsUUID, IsDefined } from 'class-validator';
import { ApiProperty } from '@nestjs/swagger';
import { __Name__Repository } from '../../domain/repositories/__name__.repository';
import { __Name__Dto } from '../dtos/__name__.dto';

export class Get__Name__ByIdQuery {
  @ApiProperty({ description: 'ID of the __name__ to retrieve' })
  @IsUUID()
  @IsDefined()
  readonly id: string;

  constructor(id: string) {
    this.id = id;
  }
}

@QueryHandler(Get__Name__ByIdQuery)
export class Get__Name__ByIdUseCase implements IQueryHandler<Get__Name__ByIdQuery, __Name__Dto> {
  constructor(
    @Inject(__Name__Repository)
    private readonly __name__Repository: __name__Repository,
  ) {}

  async execute(query: Get__Name__ByIdQuery): Promise<__Name__Dto> {
    const { id } = query;
    const __name__ = await this.__name__Repository.findById(id);

    if (!__name__) {
      throw new NotFoundException(`__Name__ with ID '${id}' not found.`);
    }

    return new __Name__Dto({
      id: __name__.id.value,
      name: __name__.name,
      description: __name__.description,
      createdAt: __name__.createdAt,
      updatedAt: __name__.updatedAt,
    });
  }
}
