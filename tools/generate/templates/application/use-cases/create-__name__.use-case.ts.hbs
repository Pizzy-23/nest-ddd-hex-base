import { CommandHandler, ICommandHandler, CommandBus } from '@nestjs/cqrs';
import { Inject } from '@nestjs/common';
import { Create__Name__Dto } from '../dtos/create-__name__.dto';
import { __Name__Entity } from '../../domain/entities/__name__.entity';
import { __Name__Repository } from '../../domain/repositories/__name__.repository';
import { UnitOfWork } from '../../../libs/ddd/domain/base-classes/unit-of-work';

@CommandHandler(Create__Name__Dto)
export class Create__Name__UseCase implements ICommandHandler<Create__Name__Dto, string> {
  constructor(
    @Inject(__Name__Repository)
    private readonly __name__Repository: __Name__Repository,
    private readonly unitOfWork: UnitOfWork,
  ) {}

  async execute(command: Create__Name__Dto): Promise<string> {
    const { name, description } = command;

    const __name__ = __Name__Entity.create({ name, description });

    await this.unitOfWork.start();
    try {
      await this.__name__Repository.save(__name__);
      await this.unitOfWork.commit();
      return __name__.id.value;
    } catch (error) {
      await this.unitOfWork.rollback();
      throw error;
    }
  }
}
